use testland;
SET FOREIGN_KEY_CHECKS = 0;
DROP TABLE IF EXISTS category, comment, example, problem, problem_tag, user, user_auth, user_problem, user_test, user_testcase;
DROP TABLE IF EXISTS post, post_topic, topic, tag, test_case_info, test_info;
SET FOREIGN_KEY_CHECKS = 1;
-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user(
                                   `user_id` bigint(20) NOT NULL AUTO_INCREMENT,
                                   `username` varchar(255) DEFAULT NULL,
                                   `phone` varchar(255) DEFAULT NULL,
                                   `address` varchar(255) DEFAULT NULL,
                                   `email` varchar(255) DEFAULT NULL,
                                   `avatar` varchar(255) DEFAULT NULL,
                                   `pass_count` int(11) DEFAULT NULL,
                                   `try_count` int(11) DEFAULT NULL,
                                   `active_time`  varchar(255) DEFAULT NULL,
                                   `user_type` int(11) DEFAULT NULL,
                                   `user_status` int(11) DEFAULT NULL,
                                   PRIMARY KEY (`user_id`)
);

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('1', 'se', '15111111111', '上海交通大学软件学院', 'user1@example.com', 'https://codegeex.cn', '1', '2', '2020-02-14 21:30:02', '0', '1');
INSERT INTO `user` VALUES ('2', '0618', '1234567890', '香农车系统学院', 'user2@example.com', 'https://codegeex.cn', '1', '2', '2020-02-14 22:00:20', '1', '1');


-- ----------------------------
-- Table structure for user_auth
-- ----------------------------
DROP TABLE IF EXISTS user_auth;
CREATE TABLE IF NOT EXISTS user_auth(
                                        `user_id` bigint(20) NOT NULL AUTO_INCREMENT,
                                        `password`  varchar(255) DEFAULT NULL,
                                        `salt` varchar(255) DEFAULT NULL,
                                        PRIMARY KEY  (`user_id`)
);

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO  user_auth VALUES ('1', '$2a$10$KUHlo5/Qh0pGd/hjOKBuQeWktOjhHV08scl1BgjkFTLtBzaExfooG','$2a$10$KUHlo5/Qh0pGd/hjOKBuQe');
INSERT INTO  user_auth VALUES ('2', '$2a$10$huTmEG2S.15rDfzwBPVTFecB/SEe5ZhcCO4FUnvL/LEZunCW4vVxe', '$2a$10$huTmEG2S.15rDfzwBPVTFe');


-- ----------------------------
-- Table structure for problem
-- ----------------------------
DROP TABLE IF EXISTS problem_tag;
DROP TABLE IF EXISTS example;
DROP TABLE IF EXISTS problem;
CREATE TABLE IF NOT EXISTS problem(
                                      `problem_id`  bigint(20) NOT NULL AUTO_INCREMENT,
                                      `problem_title` varchar(255) DEFAULT NULL,
                                      `difficulty` int(11) DEFAULT NULL,
                                      `test_count`  int(11) DEFAULT NULL,
#         `pass_count` int(11) DEFAULT NULL,
                                      `description`  text DEFAULT  NULL,
                                      `hint`   text DEFAULT NULL,
                                      `test_path` varchar(255) DEFAULT NULL,
                                      `wa_count`   int(11) DEFAULT NULL,
                                      `ac_count`   int(11) DEFAULT NULL,
                                      `tle_count` int(11) DEFAULT NULL,
                                      `re_count`  int(11) DEFAULT NULL,
                                      `mle_count` int(11) DEFAULT NULL,
                                      `update_time` varchar(255)  DEFAULT NULL,
                                      `category_id` bigint(20) DEFAULT NULL,
                                      PRIMARY KEY  (`problem_id`)
);

-- ----------------------------
-- Records of problem
-- ----------------------------
INSERT INTO problem VALUES ('1', 'title1', 2, 1, ' `
给你一个正整数数组 \`arr\`，考虑所有满足以下条件的二叉树：

- 每个节点都有 0 个或是 2 个子节点。
- 数组 \`arr\` 中的值与树的中序遍历中每个叶节点的值一一对应。
- 每个非叶节点的值等于其左子树和右子树中叶节点的最大值的乘积。

在所有这样的二叉树中，返回每个非叶节点的值的最小可能总和。这个和的值是一个 32 位整数。

如果一个节点有 0 个子节点，那么该节点为叶节点。
`',
                            'hint', 'test_path', '0', '1', '0', '0', '0', '2021-02-17 19:44:44', '1');
INSERT INTO problem VALUES ('2', 'title2', 2, 1, 'description',  'hint', 'test_path', '0', '0', '0', '1', '0', '2021-02-17 19:44:44', '2');


--  ----------------------------
-- Table structure for  user_problem
-- ----------------------------
DROP TABLE IF EXISTS user_problem;
CREATE TABLE IF NOT EXISTS user_problem(
                                           `user_problem_id` bigint(20) NOT NULL AUTO_INCREMENT,
                                           `user_id`     bigint(20) ,
                                           `problem_id` bigint(20) ,
                                           `test_count`   int(11) DEFAULT NULL,
#     0:未通过 1:通过
                                           `problem_status` int(11) DEFAULT NULL,
                                           PRIMARY KEY (`user_problem_id`),
                                           FOREIGN KEY (`user_id`) REFERENCES user (`user_id`),
                                           FOREIGN KEY (`problem_id`) REFERENCES problem (`problem_id`)
);

-- ----------------------------
-- Records of user_problem
-- ----------------------------
INSERT INTO user_problem VALUES ('1', '2', '1', 1, 1);
INSERT INTO user_problem VALUES ('2', '2', '2', 1, 0);


-- ----------------------------
-- Table structure for  user_test
-- ----------------------------
DROP TABLE IF EXISTS user_test;
CREATE TABLE IF NOT EXISTS user_test(
                                        `user_test_id` bigint(20) NOT NULL AUTO_INCREMENT,
                                        `user_problem_id` bigint(20) ,
#     (AC:0 WA:1 TLE:2 MLE:3 RE:4 )
                                        `result` int(11) DEFAULT NULL,
                                        `score` decimal(10,2) DEFAULT NULL,
                                        `address`  varchar(255)  DEFAULT NULL,
#     `sum_time`  varchar(255)  DEFAULT NULL,
#     `sum_memory`  varchar(255)  DEFAULT NULL,
                                        `time_stamp`   varchar(255)  DEFAULT NULL,
                                        `language`  varchar(255) DEFAULT NULL,
                                        PRIMARY KEY (`user_test_id`),
                                        FOREIGN KEY (`user_problem_id`) REFERENCES user_problem (`user_problem_id`)
);

-- ----------------------------
-- Records of user_test
-- ----------------------------
INSERT INTO  user_test VALUES ('1', '1', '0', '100.00', NULL, NULL, NULL);
INSERT INTO  user_test VALUES ('2', '1', '4', '10.50', NULL, NULL, NULL);


-- ----------------------------
-- Table structure for  user_testcase
-- ----------------------------
DROP TABLE IF EXISTS user_testcase;
CREATE TABLE IF NOT EXISTS user_testcase(
                                            `user_testcase_id` bigint(20) NOT NULL AUTO_INCREMENT,
                                            `user_test_id` bigint(20) ,
#     (AC:0 WA:1 TLE:2 MLE:3 RE:4 )
                                            `result` int(11) DEFAULT NULL,
#                                             `description`  text  DEFAULT NULL,
                                            `time`  varchar(255)  DEFAULT NULL,
                                            `memory`  varchar(255)  DEFAULT NULL,
                                            `score` decimal(10,2) DEFAULT NULL,
                                            PRIMARY KEY (`user_testcase_id`),
                                            FOREIGN KEY (`user_test_id`) REFERENCES user_test (`user_test_id`)
);

-- ----------------------------
-- Records of user_testcase
-- ----------------------------
INSERT INTO  user_testcase VALUES ('1', '1', '0',  '2.923s', '545MB', '10.50');
INSERT INTO  user_testcase VALUES ('2', '1', '0',  '2.173s', '54MB', '10.50');
INSERT INTO  user_testcase VALUES ('3', '2', '4',  '2.133s', '45MB', '10.50');
INSERT INTO  user_testcase VALUES ('4', '2', '4',  '2.924s', '245MB', '10.50');


# -- ----------------------------
# -- Table structure for test_info
# -- ----------------------------
# DROP TABLE IF EXISTS test_case_info;
# DROP TABLE IF EXISTS test_info;
# CREATE TABLE IF NOT EXISTS test_info(
#     `test_id` bigint(20) NOT NULL AUTO_INCREMENT,
#     `user_id`  bigint(20) NOT NULL,
#     `problem_id` bigint(20) NOT NULL,
#     `result` int(11) DEFAULT NULL,
#     `score` decimal(10,2) DEFAULT NULL,
#     `address` varchar(255) DEFAULT NULL,
#     `language` varchar(255) DEFAULT NULL,
#     PRIMARY KEY (`test_id`)
# );
#
# -- ----------------------------
# -- Records of test_info
# -- ----------------------------
# INSERT INTO  test_info VALUES ('1', '1', '1', '0', '100.00', NULL, NULL);
# INSERT INTO  test_info VALUES ('2', '1', '2', '4', '10.50', NULL, NULL);
#
#
# -- ----------------------------
# -- Table structure for test_case_info
# -- ----------------------------
# DROP TABLE IF EXISTS test_case_info;
# CREATE TABLE IF NOT EXISTS test_case_info(
#     `test_case_id` bigint(20) NOT NULL AUTO_INCREMENT,
#     `test_id` bigint(20) NOT NULL,
#     `result` int(11) DEFAULT NULL,
#     `description` text DEFAULT NULL,
#     `time` varchar(255) DEFAULT NULL,
#     `memory` varchar(255) DEFAULT NULL,
#     `score` decimal(10,2) DEFAULT NULL,
#     PRIMARY KEY (`test_case_id`),
#     FOREIGN KEY (`test_id`) REFERENCES test_info (`test_id`)
# );
#
# -- ----------------------------
# -- Records of test_case_info
# -- ----------------------------
# INSERT INTO  test_case_info VALUES ('1', '1', '1', NULL, NULL, NULL, '100.00');
# INSERT INTO  test_case_info VALUES ('2', '1', '1', NULL, NULL, NULL, '100.00');
# INSERT INTO  test_case_info VALUES ('3', '2', '4', NULL, NULL, NULL, '10.50');
# INSERT INTO  test_case_info VALUES ('4', '2', '4', NULL, NULL, NULL, '10.50');


-- ----------------------------
-- Table structure for example
-- ----------------------------
DROP TABLE IF EXISTS example;
CREATE TABLE IF NOT EXISTS example(
                                      `example_id` bigint(20) NOT NULL AUTO_INCREMENT,
                                      `problem_id` bigint(20) NOT NULL,
                                      `input` text DEFAULT NULL,
                                      `output` text DEFAULT NULL,
                                      `explanation` text DEFAULT NULL,
                                      PRIMARY KEY (`example_id`),
                                      FOREIGN KEY (`problem_id`) REFERENCES problem (`problem_id`)
);

-- ----------------------------
-- Records of example
-- ----------------------------
INSERT INTO example VALUES ('1', '1', 'input1', 'output1', 'explanation1');
INSERT INTO example VALUES ('2', '2', 'input2', 'output2', 'explanation2');


-- ----------------------------
-- Table structure for tag
-- ----------------------------
DROP TABLE IF EXISTS tag;
CREATE TABLE IF NOT EXISTS tag(
                                  `tag_id` bigint(20) NOT NULL AUTO_INCREMENT,
                                  `content` varchar(255) DEFAULT NULL,
                                  PRIMARY KEY (`tag_id`)
);

-- ----------------------------
-- Records of tag
-- ----------------------------
INSERT INTO tag VALUES ('1', 'tag1');
INSERT INTO tag VALUES ('2', 'tag2');
INSERT INTO tag VALUES ('3', 'tag3');


-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS category;
CREATE TABLE IF NOT EXISTS category(
                                       `category_id` bigint(20) NOT NULL AUTO_INCREMENT,
                                       `content` varchar(255) DEFAULT NULL,
                                       PRIMARY KEY (`category_id`)
);

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO category VALUES ('1', 'category1');
INSERT INTO category VALUES ('2', 'category2');


-- ----------------------------
-- Table structure for problem_tag
-- ----------------------------
DROP TABLE IF EXISTS problem_tag;
CREATE TABLE IF NOT EXISTS problem_tag(
                                          `problem_id` bigint(20) NOT NULL,
                                          `tag_id` bigint(20) NOT NULL,
                                          FOREIGN KEY (`problem_id`) REFERENCES problem (`problem_id`),
                                          FOREIGN KEY (`tag_id`) REFERENCES tag (`tag_id`)
);

-- ----------------------------
-- Records of problem_tag
-- ----------------------------
INSERT INTO problem_tag VALUES ('1', '1');
INSERT INTO problem_tag VALUES ('1', '2');
INSERT INTO problem_tag VALUES ('2', '3');
INSERT INTO problem_tag VALUES ('2', '2');


-- ----------------------------
-- Table structure for post
-- ----------------------------
SET FOREIGN_KEY_CHECKS =0;
DROP TABLE IF EXISTS post;
SET FOREIGN_KEY_CHECKS =1;
CREATE TABLE IF NOT EXISTS post(
                                   `post_id` bigint(20) NOT NULL AUTO_INCREMENT,
                                   `user_id` bigint(20) NOT NULL,
                                   `title` text DEFAULT NULL,
                                   `text` text DEFAULT NULL,
                                   `cover_url` text DEFAULT NULL,
                                   `summary`   text DEFAULT NULL,
                                   `post_time` varchar(255) DEFAULT NULL,
                                   `browse` bigint(20) DEFAULT NULL,
                                   `likes` bigint(20) DEFAULT NULL,
                                   `reply` bigint(20) DEFAULT NULL,
                                   `collect` bigint(20) DEFAULT NULL,
                                   `comment_num` bigint(20) DEFAULT 0,
                                   PRIMARY KEY (`post_id`),
                                   FOREIGN KEY (`user_id`) REFERENCES user (`user_id`)
);
INSERT INTO post VALUES(1,2,'hhhhh','text','testland/2023/09/08/02b4ff0faeaf4a48ae98ed88e348f48f.png','summary','2023-01-01 10:00:00',0,0,3,0,3);

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS comment;

CREATE TABLE comment (
                         `comment_id` bigint(20) NOT NULL AUTO_INCREMENT,
                         `user_id` bigint(20) NOT NULL,
                         `post_id` bigint(20) NOT NULL,
                         `parent_id` bigint(20) ,
                         `content` text DEFAULT NULL,
                         `likes` bigint(20) DEFAULT NULL,
                         `comment_time` varchar(255) DEFAULT NULL,
                         PRIMARY KEY (`comment_id`),
                         FOREIGN KEY (`user_id`) REFERENCES user (`user_id`)
);

INSERT INTO comment VALUES (1, 2, 1, null, '1', 0, '2023-01-01 10:00:00'),
                           (2, 2, 1, null, '2', 0, '2023-01-01 10:00:00'),
                           (3, 2, 1, 1, '3', 0, '2023-01-01 10:00:00');
#                            (4, 2, 1, 3, '4', 0, '2023-01-01 10:00:00');


-- ----------------------------
-- Table structure for topic
-- ----------------------------
DROP TABLE IF EXISTS topic;
CREATE TABLE IF NOT EXISTS topic(
                                    `topic_id` bigint(20) NOT NULL AUTO_INCREMENT,
                                    `content` varchar(255) DEFAULT NULL,
                                    PRIMARY KEY (`topic_id`)
);


-- ----------------------------
-- Table structure for post_topic
-- ----------------------------
DROP TABLE IF EXISTS post_topic;
CREATE TABLE IF NOT EXISTS post_topic(
                                         `post_id` bigint(20) NOT NULL,
                                         `topic_id` bigint(20) NOT NULL,
                                         FOREIGN KEY (`post_id`) REFERENCES post (`post_id`),
                                         FOREIGN KEY (`topic_id`) REFERENCES topic (`topic_id`)
);

